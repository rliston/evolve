import argparse
import random
import datetime
import time
import numpy as np ; print('numpy ' + np.__version__)
import lifelib ; print('lifelib',lifelib.__version__)

np.set_printoptions(linewidth=250)
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--timeout', help='stopping limit', default=99999999, type=int)
parser.add_argument('--patience', help='stopping limit', default=10000, type=int)
parser.add_argument('--advance', help='step size', default=100, type=int)
parser.add_argument('--radius', help='initial radius', default=1.0, type=float)
parser.add_argument('--sigma', help='sample area for density calculation', default=3, type=float)
parser.add_argument('--results', help='results directory', default='./results')
parser.add_argument('--seed', help='random seed', default=None, type=int)
parser.add_argument('--memory', help='garbage collection limit in MB', default=30000, type=int)
parser.add_argument('--summary',help='only save final pattern',default=False, action='store_true')
parser.add_argument('--verbose', default=False, action='store_true')
args = parser.parse_args()
if args.seed is None:
    args.seed = random.randint(1,1000000)
random.seed(args.seed)
np.random.seed(args.seed)
print(args)

def log(hdr,n,k,l,m,pop,d,r,patience,keep,advance,mut,push):
    print('{:10} wall {} n {:6d} k {:6d} \033[1mLIFE\033[0m {:6d} pop {:6d} m {:6d} r {:12.8f} density {:12.8f} patience {:12.0f} keep {:12.8f} mut {:6d} push {:6d} advance {:6d}'.format(hdr,datetime.datetime.now(),n,k,l,pop,m,r,d,patience,keep,mut,push,advance))

# run soup until population is stable
def lifespan(pat,advance):
    ph=[0]*17
    sh={}
    last=0
    itot=0
    for i in range(1000000//advance):
        ph.append(pat.population)
        ph.pop(0)
        pat = pat.advance(advance)
        itot += advance
        s = sum(ph)
        if s in sh:
            return itot
        else:
            sh[s]=1
    return -1

sess = lifelib.load_rules("b3s23")
lt = sess.lifetree(memory=args.memory) # 50GB RAM
pat = lt.pattern() # empty pattern

nrun=0 # runaway count
n=0
k=0
lmax=0
mut=0
push=0
hist=[]
adv=[]
t0=time.time()

while True:
    backtrack = False
    n+=1
    k+=1
    #patience = 100+lmax
    patience = args.patience
    #keep = k/patience
    keep=0
    #keep = 0.1
    #advance = 2**int(np.log(1+lmax))
    if lmax < 1000:
        advance = 1
    elif lmax < 10000:
        advance = 10
    elif lmax < 100000:
        advance = 100
    else:
        advance = 1000

    #advance = args.advance

    #r = 1.414+np.sqrt(pat.population) # radius
    #r = args.radius+np.sqrt(pat.population) # radius
    r = max(args.radius,np.sqrt(pat.population)) # radius

    # apply random mutations
    # m = random.expovariate(1)
    # m = int(np.ceil(m))
    # m = int(m*r)
    m = random.randint(1,int(1+r))

    xy=[(int(random.normalvariate(0,r)),int(random.normalvariate(0,r))) for i in range(m)]
    for (x,y) in xy:
        pat[x,y] ^= 1

    # use lifelib to compute lifespan
    l = lifespan(pat,advance)

    # compute density metric
    rs = int(args.sigma*r)
    d = pat[-rs:rs,-rs:rs].population / ((2*rs)**2) # 3-sigma radius, each side is sigma*(r+r)

    if l<0: # RUNAWAY
        log('RUNAWAY',n,k,l,m,pat.population,d,r,patience,keep,advance,mut,push)
        pat.save('{}/runaway_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header=None, footer=None, comments=str(args), file_format='rle', save_comments=True)
        for (x,y) in xy:
            pat[x,y] ^= 1 # revert
        nrun+=1
        if nrun>100:
            backtrack=True

    elif l>lmax: # keep the mutation
        mut+=m
        log('BEST',n,k,l,m,pat.population,d,r,patience,keep,advance,mut,push)
        if not args.summary:
            pat.write_rle('{}/best_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header=None, footer=None, comments=str(args), file_format='rle', save_comments=True)
        lmax = l
        hist.append(pat.coords())
        adv.append(advance)
        k=1
        t0 = time.time()

    elif l==lmax:
        if random.random()>keep: # keep some of the "harmless" mutations
            for (x,y) in xy:
                pat[x,y] ^= 1 # revert
        else:
            push+=m

    elif l<lmax:
        for (x,y) in xy:
            pat[x,y] ^= 1 # revert

    if args.verbose and n%1000==0:
        log('',n,k,l,m,pat.population,d,r,patience,keep,advance,mut,push)

    if k>patience: # reset if stuck
        #log('FINAL',n,k,lmax,m,pat.population,d,r,patience,keep,advance,mut,push)
        #pat.save('{}/final_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,lmax,args.seed,n), header=None, footer=None, comments=str(args), file_format='rle', save_comments=True)
        backtrack=True

    if time.time()-t0 > args.timeout: # time based stopping for experimentation
        log('TIMEOUT',n,k,lmax,m,pat.population,d,r,patience,keep,advance,mut,push)
        pat.save('{}/timeout_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,lmax,args.seed,n), header=None, footer=None, comments=str(args), file_format='rle', save_comments=True)
        backtrack=True

    if backtrack:
        if len(hist)==0:
            break
        #b = random.expovariate(1)
        #b = int(np.ceil(m))
#        b=1
#        if len(hist) < b+1:
#            break
#        del hist[-b:]
        pat = lt.pattern()
        for (x,y) in hist.pop():
            pat[x,y]=1

        advance = adv.pop()
        lmax = lifespan(pat,advance)
        t0 = time.time()
        backtrack=False
        r = max(args.radius,np.sqrt(pat.population)) # radius
        rs = int(args.sigma*r)
        d = pat[-rs:rs,-rs:rs].population / ((2*rs)**2) # 3-sigma radius, each side is sigma*(r+r)
        log('BACKTRACK',n,k,lmax,m,pat.population,d,r,patience,keep,advance,mut,push)
        k=1
