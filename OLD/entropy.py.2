import argparse
import random
import datetime
import time
import numpy as np ; print('numpy ' + np.__version__)
import lifelib ; print('lifelib',lifelib.__version__)
import scipy.stats

np.set_printoptions(linewidth=250)
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--rad', help='minimum radius', default=1, type=int)
parser.add_argument('--step', help='# gen per step for entropy calculation', default=1, type=int)
parser.add_argument('--timeout', help='timeout in units of n', default=100, type=int)
parser.add_argument('--gen', help='initial generation', default=0, type=int)
parser.add_argument('--period', help='length of population entropy trace', default=1000, type=int)
parser.add_argument('--gamma', help='radius coefficient', default=1.414, type=float)
parser.add_argument('--seed', help='random seed', default=None, type=int)
parser.add_argument('--memory', help='garbage collection limit in MB', default=60000, type=int)
parser.add_argument('--results', help='results directory', default='./results')
#parser.add_argument('--ath', help='only save all time high patterns', default=False, action='store_true')
#parser.add_argument('--watchdog', help='timeout parameter', default=2.0, type=float)
#parser.add_argument('--minrad', help='minimum radius', default=1.0, type=float)
#parser.add_argument('--gamma', help='radius coefficient', default=3.14, type=float)
##parser.add_argument('--expo', help='exponential distribution parameter', default=0, type=float)
#parser.add_argument('--ipop', help='initial population', default=0, type=int)
##parser.add_argument('--srad', help='std dev for new grid entries', default=100, type=float)
##parser.add_argument('--spop', help='initial grid entries', default=10, type=int)
##parser.add_argument('--patience', help='number of batches before backtracking', default=100, type=int)
#parser.add_argument('--backtrack', help='number of batches before backtracking', default=0, type=int)
#parser.add_argument('--pattern', help='initial pattern', default=None, type=str)
#parser.add_argument('--seed', help='random seed', default=None, type=int)
#parser.add_argument('--memory', help='garbage collection limit in MB', default=60000, type=int)
#parser.add_argument('--results', help='results directory', default='./results')
##parser.add_argument('--space', help='grid spacing', default=25, type=int)
##parser.add_argument('--side', help='grid size = side*2+1', default=2, type=int)
##parser.add_argument('--radius', help='initial radius', default=1.0, type=float)
#parser.add_argument('--period', help='population trace length', default=100, type=int)
#parser.add_argument('--batch', help='number of mutations / batch', default=100, type=int)
##parser.add_argument('--terminate', default=False, action='store_true')
##parser.add_argument('--bump', default=False, action='store_true')
#
###parser.add_argument('--space', help='grid spacing', default=100, type=int)
##parser.add_argument('--timeout', help='stopping limit', default=99999999, type=int)
##parser.add_argument('--keep', help='harmless mutation rate', default=None, type=float)
###parser.add_argument('--advance', help='step size', default=100, type=int)
##parser.add_argument('--sigma', help='sample area for density calculation', default=3, type=float)
##parser.add_argument('--summary',help='only save final pattern',default=False, action='store_true')
parser.add_argument('--verbose', default=False, action='store_true')
parser.add_argument('--debug', default=False, action='store_true')
args = parser.parse_args()
if args.seed is None:
    args.seed = random.randint(1,1000000)
random.seed(args.seed)
np.random.seed(args.seed)
#args.ipop = int(args.radius*args.radius)
#args.batch = int(args.radius)
print(args)

def log(hdr,n,e,emax,m,pop,r,l):
    print('{:10} wall {} n {:6d} ENTROPY {:12.8f} emax {:12.8f} pop {:6d} m {:6d} r {:12.8f} l {:6d}'.format(hdr,datetime.datetime.now(),n,e,emax,pop,m,r,l))

def radius(pop):
    return args.rad
    #return max(args.rad,args.gamma*np.sqrt(pop))
    #return max(1.414,args.gamma*np.sqrt(pop))

# run soup until population is stable, starting at generation lmax
def lifespan(pat,period,lmax):
        pt = np.zeros(period)
        o = max(0,lmax-period)
        pat = pat.advance(o) # jump to lmax
        for j in range(1000000//period):
            for k in range(period):
                pt[k] = pat.population
                pat = pat.advance(1)
            #pt = [pat.advance(k).population for k in range(1,period)] # population trace up to period
            value,counts = np.unique(pt, return_counts=True) # histogram of population trace
            e = scipy.stats.entropy(counts,base=None) # entropy of population distribution 
            #print(e,pt)
            if e<0.6827*np.log(period): # threshold
                return max(0,o+j*period)
        return -1

# compute population entropy from gen:gen+period
def entropy(pat,period,gen):
    trace = np.zeros(period)
    pat = pat.advance(gen) # jump to lmax
    for k in range(period//args.step):
        trace[k] = pat.population
        pat = pat.advance(args.step)
    value,counts = np.unique(trace, return_counts=True) # histogram of population trace
    return scipy.stats.entropy(counts) # entropy of population distribution 

sess = lifelib.load_rules("b3s23")
lt = sess.lifetree(memory=args.memory)
pat = lt.pattern()
emax=0
n=0
#t0=time.time()
n0=0
while True:
    r = radius(pat.population)
    xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1/r))),2])
    # apply mutation xy
    pat[xy] ^=1
    e = entropy(pat,args.period,args.gen)
    if e>emax:
        l = lifespan(pat,100,0)
        emax=e
        #args.gen = max(0,l-args.period)
        #args.gen = l
        #t0=time.time()
        n0=n
        log('BEST',n,e,emax,len(xy),pat.population,r,l)
        bb = pat.bounding_box
        pat.write_rle('{}/best_E{:08.6f}_L{:06d}_seed{:09d}_n{:09d}.rle'.format(args.results,e,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
    else:
        pat[xy] ^=1 # revert
    n+=1
    #if time.time() > t0+args.timeout:
    if n > n0+args.timeout:
        print('{:10} wall {} n {:6d}'.format('TIMEOUT',datetime.datetime.now(),n))
        break
    
