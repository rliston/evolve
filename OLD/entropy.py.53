import argparse
import random
import datetime
import time
import numpy as np ; print('numpy ' + np.__version__)
import lifelib ; print('lifelib',lifelib.__version__)
import scipy.stats
import os
import copy

np.set_printoptions(linewidth=250)
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
#parser.add_argument('--rgr', help='radius growth rate', default=1, type=float)
#parser.add_argument('--kwin', help='k sample window size', default=100, type=int)
#parser.add_argument('--kmean', help='number of mutations before backtrack', default=15, type=float)
parser.add_argument('--tol', help='lmax tolerance', default=1, type=float)
#parser.add_argument('--backtrack', help='# nath to pop history', default=10000, type=int)
parser.add_argument('--rad', help='radius', default=0.5, type=float)
parser.add_argument('--advance', help='# gen to advance on ATH', default=3, type=int)
parser.add_argument('--init', help='initial pattern', default=None, type=str)
parser.add_argument('--seed', help='random seed', default=None, type=int)
parser.add_argument('--memory', help='garbage collection limit in MB', default=60000, type=int)
parser.add_argument('--results', help='results directory', default='./results')
parser.add_argument('--verbose', default=False, action='store_true')
parser.add_argument('--debug', default=False, action='store_true')
args = parser.parse_args()
if args.seed is None:
    args.seed = random.randint(1,1000000)
random.seed(args.seed)
np.random.seed(args.seed)
print(args)

def log(hdr,n,k,l,ath,pop,m,r,nath):
    print('{:10} wall {} n {:6d} k {:6d} LIFE {:12.4f} ath {:12.4f} pop {:6d} m {:6d} r {:12.8f} nath {:6d}'.format(hdr,datetime.datetime.now(),n,k,l,ath,pop,m,r,nath))

# run soup until population is stable, starting at generation lmax
def lifespan(pat,period,lmax):
        pt = np.zeros(period)
        o = int(max(0,lmax-period))
        pat = pat.advance(o) # jump to lmax
        p0 = pat.population
        for j in range(1000000//period):
            for k in range(period):
                pt[k] = pat.population
                pat = pat.advance(1)
            if (pat.population>(2*p0)) and ((pat.population-p0)>10000): # HEURISTIC: 2x pop growth over lmax pop is suspicious
                return -2 # linear growth
            value,counts = np.unique(pt, return_counts=True) # histogram of population trace
            e = scipy.stats.entropy(counts,base=None) # entropy of population distribution 
            if e<0.682689492*np.log(period): # HEURISTIC: threshold
                return max(0,o+j*period)
        return -1 # runaway


def ash(pat,lmax):
    pat = pat.advance(lmax)
    pat = pat.advance(100000) # allow gliders to escape
    pat = pat[-10000:10000, -10000:10000]
    pat = pat.centre()
    return pat

sess = lifelib.load_rules("b3s23")
lt = sess.lifetree(memory=args.memory)
if args.init is None:
    pat = lt.pattern()
else:
    pat = lt.load(args.init) # empty pattern if None, else load .rle file
    pat = pat.centre()

#history=[]
lmax=0
ath=0
n=0
k=0
nath=0
while True:
    n+=1
    nath+=1
    k+=1

    r = args.rad
    #r = args.rgr*np.log(k)+0.5
    #r = args.rgr*np.log(np.mean(khist[-args.kwin:]))+0.5
    #r = np.log(np.sqrt(np.mean(khist[-args.kwin:])))+0.5

    # BACKTRACK if no progress
    #if nath > args.backtrack:
    #if nath > max(pat.population,100):
    #if len(khist) > max(pat.population,100):
    #if len(khist) > max(pat.population,1):
    #if np.mean(khist[-args.kwin:]) > args.kmean:
    #kmean = np.mean(khist[-args.kwin:])
    #kstd = np.std(khist[-args.kwin:])
    #print('kmean',kmean,'kstd',kstd)
    #if k > 15+kmean+kstd*1.0:
    #if k>100:
    #if len(khist)>100 and k>np.mean(khist)+np.std(khist)*1.0:
    if k>lmax+1:
        pat = pat.advance(args.advance)
        lmax -= args.advance

#        # advance to minimum population
#        pt = np.zeros(args.advance)
#        pa = []
#        for j in range(args.advance):
#            pt[j] = pat.population
#            pa.append(pat)
#            pat = pat.advance(1)
#        nadv = np.argmin(pt)
#        pat = pa[nadv]
#        lmax -= nadv

#        if len(history)==0:
#            print("BACKTRACK STACK EMPTY")
#            break
#        (xy,l) = history.pop()
#        lmax=l
#        pat = lt.pattern()
#        for (x,y) in xy:
#            pat[x,y]=1
        k=0
        nath=0
        fn = '{}/back_P{:06d}_L{:06d}_seed{:09d}_n{:09d}.rle'.format(args.results,pat.population,int(lmax),args.seed,n)
        bb = pat.bounding_box
        if bb is not None:
            pat.write_rle(fn, header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
        log('BACKTRACK',n,k,lmax,ath,pat.population,len(xy),r,nath)
        continue

    # random xor mutation
    coords = pat.coords()
    if len(coords)==0: # ensure at least 1 live cell
        coords = [[0,0]]
    m = int(np.ceil(random.expovariate(1)))
    xy = np.array([[np.random.normal(loc[0],r),np.random.normal(loc[1],r)] for loc in random.choices(coords,k=m)])
    v0 = pat[xy]
    pat[xy] ^=1 # apply mutation xy
    
    l = lifespan(pat,100,lmax*args.tol)

    if l==-1:
        log('RUNAWAY',n,k,l,ath,pat.population,len(xy),r,nath)
        bb = pat.bounding_box
        pat.write_rle('{}/runaway_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
        pat[xy] = v0 # revert mutation xy
        bb = pat.bounding_box
        pat.write_rle('{}/snapshot_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
    elif l==-2:
        log('GROWTH',n,k,l,ath,pat.population,len(xy),r,nath)
        bb = pat.bounding_box
        pat.write_rle('{}/growth_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
        pat[xy] = v0 # revert mutation xy
        bb = pat.bounding_box
        pat.write_rle('{}/snapshot_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
    elif l==lmax:
        log('BEST',n,k,l,ath,pat.population,len(xy),r,nath)
        k=0
    elif l>ath*args.tol:
        if l>ath:
            ath = l
            fn = '{}/ath_P{:06d}_L{:06d}_seed{:09d}_n{:09d}.rle'.format(args.results,pat.population,int(l),args.seed,n)
            bb = pat.bounding_box
            pat.write_rle(fn, header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
            log('ATH',n,k,l,ath,pat.population,len(xy),r,nath)
            nath=0
        else:
            #fn = '{}/lmax_P{:06d}_L{:06d}_seed{:09d}_n{:09d}.rle'.format(args.results,pat.population,int(l),args.seed,n)
            #bb = pat.bounding_box
            #pat.write_rle(fn, header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
            log('LMAX',n,k,l,ath,pat.population,len(xy),r,nath)
        k=0
        lmax=l
        #pat = pat.advance(args.advance)
        #lmax -= args.advance
        #history.append([pat.coords(),lmax])
    else:
        pat[xy] = v0 # revert mutation xy
