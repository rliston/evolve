import argparse
import random
import datetime
import time
import numpy as np ; print('numpy ' + np.__version__)
import lifelib ; print('lifelib',lifelib.__version__)
import scipy.stats

np.set_printoptions(linewidth=250)
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--ath', help='only save all time high patterns', default=False, action='store_true')
parser.add_argument('--watchdog', help='timeout parameter', default=2.0, type=float)
parser.add_argument('--minrad', help='minimum radius', default=1.0, type=float)
parser.add_argument('--gamma', help='radius coefficient', default=3.14, type=float)
#parser.add_argument('--expo', help='exponential distribution parameter', default=0, type=float)
parser.add_argument('--ipop', help='initial population', default=0, type=int)
#parser.add_argument('--srad', help='std dev for new grid entries', default=100, type=float)
#parser.add_argument('--spop', help='initial grid entries', default=10, type=int)
#parser.add_argument('--patience', help='number of batches before backtracking', default=100, type=int)
parser.add_argument('--backtrack', help='number of batches before backtracking', default=0, type=int)
parser.add_argument('--pattern', help='initial pattern', default=None, type=str)
parser.add_argument('--seed', help='random seed', default=None, type=int)
parser.add_argument('--memory', help='garbage collection limit in MB', default=60000, type=int)
parser.add_argument('--results', help='results directory', default='./results')
#parser.add_argument('--space', help='grid spacing', default=25, type=int)
#parser.add_argument('--side', help='grid size = side*2+1', default=2, type=int)
#parser.add_argument('--radius', help='initial radius', default=1.0, type=float)
parser.add_argument('--period', help='population trace length', default=100, type=int)
parser.add_argument('--batch', help='number of mutations / batch', default=100, type=int)
#parser.add_argument('--terminate', default=False, action='store_true')
#parser.add_argument('--bump', default=False, action='store_true')

#parser.add_argument('--space', help='grid spacing', default=100, type=int)
#parser.add_argument('--timeout', help='stopping limit', default=99999999, type=int)
#parser.add_argument('--keep', help='harmless mutation rate', default=None, type=float)
##parser.add_argument('--advance', help='step size', default=100, type=int)
#parser.add_argument('--sigma', help='sample area for density calculation', default=3, type=float)
#parser.add_argument('--summary',help='only save final pattern',default=False, action='store_true')
parser.add_argument('--verbose', default=False, action='store_true')
parser.add_argument('--debug', default=False, action='store_true')
args = parser.parse_args()
if args.seed is None:
    args.seed = random.randint(1,1000000)
random.seed(args.seed)
np.random.seed(args.seed)
#args.ipop = int(args.radius*args.radius)
#args.batch = int(args.radius)
print(args)

def radius(pop):
    return max(args.minrad,np.sqrt(pop/args.gamma))
    #return max(args.minrad,np.sqrt(pop/np.pi))
    #return max(args.minrad,np.sqrt(pop))

def log(hdr,n,l,lmax,m,pop,r,k,backtrack):
    print('{:10} wall {} n {:6d} LIFE {:6d} lmax {:6d} pop {:6d} m {:6d} r {:12.8f} k {:6d} backtrack {:6d}'.format(hdr,datetime.datetime.now(),n,l,lmax,pop,m,r,k,int(backtrack)))

# run soup until population is stable, starting at generation lmax
def lifespan(pat,period,lmax):
        pt = np.zeros(period)
        o = max(0,lmax-period)
        pat = pat.advance(o) # jump to lmax
        for j in range(1000000//period):
            for k in range(period):
                pt[k] = pat.population
                pat = pat.advance(1)
            #pt = [pat.advance(k).population for k in range(1,period)] # population trace up to period
            value,counts = np.unique(pt, return_counts=True) # histogram of population trace
            e = scipy.stats.entropy(counts,base=None) # entropy of population distribution 
            #print(e,pt)
            if e<0.6827*np.log(period): # threshold
                return max(0,o+j*period)
        return -1

# compute population entropy from gen:gen+period
def entropy(pat,period,gen):
    trace = np.zeros(period)
    pat = pat.advance(gen) # jump to lmax
    for k in range(period):
        trace[k] = pat.population
        pat = pat.advance(1)
    value,counts = np.unique(trace, return_counts=True) # histogram of population trace
    return scipy.stats.entropy(counts) # entropy of population distribution 

# compute entropy for a batch of n mutations
def batch(pat,period,lmax,b,r):
    mut=[]
    ent=[]
    for k in range(b):
        #q = 1+int(np.ceil(random.expovariate(1)))
        #q = int(np.ceil(random.expovariate(1)))
        #q = min(int(np.ceil(random.expovariate(1))),len(grid))
        #q = min(1+int(np.ceil(random.expovariate(1))),len(grid))
        #q = random.randint(1,len(grid))
        #q = random.randint(1,ng)
        #q=1
        #q = len(grid)

        xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1/r))),2])
        #xy = [(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(int(np.floor(random.expovariate(1)))) for (x0,y0) in grid]
        #xy = np.random.normal(0,r,size=[int(np.floor(1+random.expovariate(1))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1/np.sqrt(lmax)))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(0.5))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(args.expo))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1/pat.population))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1/(10*r)))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(pat.population/(np.pi*r*r)))),2])
        #if pat.population < np.pi*r*r:
        #    xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(args.expo+pat.population/(np.pi*r*r)))),2])
        #    print('expo',args.expo+pat.population/(np.pi*r*r),len(xy))
        #else:
        #    xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(1))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate((1/pat.population)*(1+len(best))))),2])
        #xy = np.random.normal(0,r,size=[int(np.ceil(random.expovariate(args.expo*(1+len(best))))),2])
        #print(k,'xy.shape',xy.shape)

#        xy=[]
#        for j in range(len(grid)):
#        #for j in range(q):
#        #for j in range(b%len(grid)):
#            # apply random mutations
#            m = random.expovariate(1)
#            #m = int(np.ceil(m))
#            #m = int(np.round(m))
#            m = int(np.floor(m))
#            #print('q',q,'m',m)
#
##            if j==0:
##                (x0,y0) = (0,0)
##            else:
##                (x0,y0) = random.choice(grid)
#            #(x0,y0) = random.choice(grid)
#            (x0,y0) = grid[j] # grid is sorted by norm
#            xy.extend([(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(m)])

        #print('xy',len(xy))
        #xy=[(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(int(np.round(random.expovariate(1)))) for (x0,y0) in grid]
        #xy=[(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(int(np.ceil(random.expovariate(1)))) for (x0,y0) in random.choices(grid,k=int(np.ceil(random.expovariate(1))))]
        #xy=[(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(random.randint(1,int(r))) for (x0,y0) in random.choices(grid,k=int(np.ceil(random.expovariate(1))))]
        #xy=[(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(random.randint(1,int(r))) for x0,y0 in random.choice(grid)]
        mut.append(xy)

        # apply mutation xy
        pat[xy] ^=1
        #for (x,y) in xy:
        #    pat[x,y] ^= 1

        l = lifespan(pat,period,lmax)
        ent.append(l)
        if l>lmax:
            lmax=l
        if args.debug:
            print('k',k,'xy',len(xy),'life',ent[-1])
        if ent[-1]<0:
            log('RUNAWAY',n,l,lmax,len(xy),pat.population,r,k,len(best))
            bb = pat.bounding_box
            pat.write_rle('{}/runaway_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)

        # revert
        pat[xy] ^=1
        #for (x,y) in xy:
        #    pat[x,y] ^= 1

    i = np.argmax(ent)
    if args.verbose:
        print('np.mean(life)',np.mean(ent), 'np.std(life)',np.std(ent), 'i',i,'life',ent[i],'xy',len(mut[i]))
    return mut[i], ent[i]

sess = lifelib.load_rules("b3s23")
lt = sess.lifetree(memory=args.memory)
if args.pattern is None:
    pat = lt.pattern()
else:
    pat = lt.pattern(args.pattern) # empty pattern if None, else load .rle file

n=0 # total count
k=0 # backtrack count
best=[]
#side = args.side
#space = args.space
#grid=[(x,y) for x in range(-args.side*args.space,args.side*args.space+args.space,args.space) for y in range(-args.side*args.space,args.side*args.space+args.space,args.space)]

# superpop grid
#grid=[(random.normalvariate(0,args.srad),random.normalvariate(0,args.srad)) for i in range(args.spop)]
#grid=[(0,0)]
#ipat = np.random.normal(0,np.sqrt(args.ipop/np.pi),size=[args.ipop,2])
ipat = np.random.normal(0,radius(args.ipop),size=[args.ipop,2])
#ipat = np.random.normal(0,args.radius,size=[args.ipop,2])
print('ipat.shape',ipat.shape)
pat[ipat] ^= 1
#pat[0,0]=1
print('pat.population',pat.population)
#print('pat.coords',pat.coords())
lmax = lifespan(pat,args.period,0)
print('lmax',lmax)
ath=lmax
#for i in range(args.ipop):
#    pat[int(random.normalvariate(0,args.radius)),int(random.normalvariate(0,args.radius))] ^= 1

#grid.extend([(random.normalvariate(0,args.srad),random.normalvariate(0,args.srad)) for i in range(args.spop)])

#side = 4
#space = 20
#grid=[(x,y) for x in range(-side*space,side*space+space,space) for y in range(-side*space,side*space+space,space)]

#grid = np.array(grid)
#sort = np.argsort(np.linalg.norm(grid,axis=1))
#grid = grid[sort]

#print(grid.shape)
#print(grid)
#print(np.linalg.norm(grid,axis=1))
#print(np.argsort(np.linalg.norm(grid,axis=1)))
#t = np.argsort(np.linalg.norm(grid,axis=1))
#print(grid[t])
#exit()
#grid = [(random.normalvariate(0,args.srad),random.normalvariate(0,args.srad)) for i in range(args.spop)]
#side = len(grid)
#ea=[]
backtrack = args.backtrack
while True:
#    if lmax<5000:
#        side=0
#    elif lmax<15000:
#        side=1
#    elif lmax<45000:
#        side=2
#    else:
#        side=3
    #grid=[(x,y) for x in range(-side*space,side*space+space,space) for y in range(-side*space,side*space+space,space)]
    n += args.batch
    k += 1
    #r = max(args.radius,np.sqrt(pat.population/len(grid))) # radius
    #r = args.radius
    #r = np.sqrt(pat.population)
    #r = np.sqrt(pat.population/np.pi)
    r = radius(pat.population)
    xy,l = batch(pat,args.period,lmax,args.batch,r)
    #ea.append(e)
    if l > lmax:
        pat[xy] ^=1
        #r = np.sqrt(pat.population/np.pi)
        r = radius(pat.population)
        #for (x,y) in xy:
            #pat[x,y] ^= 1
        #lmax += args.period
        lmax = l
        #l = lifespan(pat,0)
        best.append([pat.coords(),l])
        bb = pat.bounding_box
        if l>ath:
            ath=l
            log('BEST',n,l,lmax,len(xy),pat.population,r,k,len(best))
            log('ATH',n,l,lmax,len(xy),pat.population,r,k,len(best))
            pat.write_rle('{}/ath_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
            wd=n
        else:
            log('BEST',n,l,lmax,len(xy),pat.population,r,k,len(best))
            if not args.ath:
                pat.write_rle('{}/best_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header='#CXRLE Pos={},{}\n'.format(bb[0],bb[1]), footer=None, comments=str(args), file_format='rle', save_comments=True)
        k=0
    elif l == lmax:
        pass
        #pat[xy] ^=1

        #for (x,y) in xy:
            #pat[x,y] ^= 1

#    if k > args.patience*len(grid):
#        g = args.grid
#        grid.append((int(random.normalvariate(0,g)),int(random.normalvariate(0,g))))
#        #side = len(grid) # fixme
#        k=0
#        log('PATIENCE',n,l,lmax,len(xy),pat.population,r,k)

    if k > backtrack:
        #b = min(len(best),int(np.ceil(random.expovariate(1/len(best)))))
        #b = min(len(best),int(np.ceil(random.expovariate(2))))
        b = min(len(best),1)
        for j in range(b):
            best.pop()
        if len(best)==0:
            log('EMPTY',n,l,lmax,0,pat.population,r,k,len(best))
            break
        #(xy,l) = best.pop()
        #best.pop()
        (xy,l) = best[-1]
        lmax = l
        pat = lt.pattern()
        pat[xy] ^=1
        #r = np.sqrt(pat.population/np.pi)
        r = radius(pat.population)
        #for (x,y) in xy:
            #pat[x,y]=1
#        backtrack = backtrack*0.5
#        if backtrack<1:
#            log('TERMINATE',n,l,lmax,len(xy),pat.population,r,k,backtrack)
#            break
        log('BACKTRACK',n,l,lmax,0,pat.population,r,k,len(best))
        k=0
        if n>args.watchdog*wd:
            log('WATCHDOG',n,l,lmax,0,pat.population,r,k,len(best))
            break
            
        #break

#        if n>lmax:
#            log('TERMINATE',n,l,lmax,len(xy),pat.population,r,k)
#            break

#    if n > lmax and args.terminate:
#        log('TERMINATE',n,l,lmax,len(xy),pat.population,r,k,side,v)
#        break
#  
#    if n>1000 and v>lmax and args.bump:
#        log('BUMP',n,l,lmax,len(xy),pat.population,r,k,side,v)
#        side +=1
#        v=0

