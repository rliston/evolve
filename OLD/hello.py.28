import argparse
import random
import datetime
import time
import numpy as np ; print('numpy ' + np.__version__)
import lifelib ; print('lifelib',lifelib.__version__)
import scipy.stats

np.set_printoptions(linewidth=250)
parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('--pattern', help='initial pattern', default=None, type=str)
parser.add_argument('--seed', help='random seed', default=None, type=int)
parser.add_argument('--memory', help='garbage collection limit in MB', default=60000, type=int)
parser.add_argument('--results', help='results directory', default='./results')
parser.add_argument('--space', help='grid spacing', default=25, type=int)
parser.add_argument('--side', help='grid size = side*2+1', default=2, type=int)
parser.add_argument('--radius', help='initial radius', default=1.0, type=float)
parser.add_argument('--period', help='population trace length', default=100, type=int)
parser.add_argument('--batch', help='number of mutations / batch', default=1000, type=int)

#parser.add_argument('--space', help='grid spacing', default=100, type=int)
#parser.add_argument('--timeout', help='stopping limit', default=99999999, type=int)
#parser.add_argument('--patience', help='stopping limit', default=10000, type=int)
#parser.add_argument('--keep', help='harmless mutation rate', default=None, type=float)
##parser.add_argument('--advance', help='step size', default=100, type=int)
#parser.add_argument('--sigma', help='sample area for density calculation', default=3, type=float)
#parser.add_argument('--summary',help='only save final pattern',default=False, action='store_true')
parser.add_argument('--verbose', default=False, action='store_true')
args = parser.parse_args()
if args.seed is None:
    args.seed = random.randint(1,1000000)
random.seed(args.seed)
np.random.seed(args.seed)
print(args)

def log(hdr,n,l,lmax,m,pop,r,e):
    print('{:10} wall {} n {:6d} LIFE {:6d} lmax {:6d} pop {:6d} m {:6d} r {:12.8f} e {:12.8f}'.format(hdr,datetime.datetime.now(),n,l,lmax,pop,m,r,e))

# compute population entropy from gen:gen+period
def entropy(pat,period,gen):
    trace = np.zeros(period)
    pat = pat.advance(gen) # jump to lmax
    for k in range(period):
        trace[k] = pat.population
        pat = pat.advance(1)
    value,counts = np.unique(trace, return_counts=True) # histogram of population trace
    return scipy.stats.entropy(counts) # entropy of population distribution 

# compute entropy for a batch of n mutations
def batch(pat,period,gen,b,grid,r):
    mut=[]
    ent=np.zeros(b)
    for k in range(b):
        # apply random mutations
        m = random.expovariate(1)
        m = int(np.ceil(m))

        (x0,y0) = random.choice(grid)
        xy=[(int(x0+random.normalvariate(0,r)),int(y0+random.normalvariate(0,r))) for i in range(m)]
        for (x,y) in xy:
            pat[x,y] ^= 1

        # use lifelib to compute entropy
        mut.append(xy)
        ent[k] = entropy(pat,period,gen)

        # revert
        for (x,y) in xy:
            pat[x,y] ^= 1

    i = np.argmax(ent)
    return mut[i], ent[i]

# run soup until population is stable, starting at generation lmax
def lifespan(pat,lmax):
        period=100
        pt = np.zeros(period)
        o = max(0,lmax-period)
        pat = pat.advance(o) # jump to lmax
        for j in range(1000000//period):
            for k in range(period):
                pt[k] = pat.population
                pat = pat.advance(1)
            #pt = [pat.advance(k).population for k in range(1,period)] # population trace up to period
            value,counts = np.unique(pt, return_counts=True) # histogram of population trace
            e = scipy.stats.entropy(counts,base=None) # entropy of population distribution 
            #print(e,pt)
            if e<0.6827*np.log(period): # threshold
                return max(0,o+j*period)
        return -1

sess = lifelib.load_rules("b3s23")
lt = sess.lifetree(memory=args.memory)
if args.pattern is None:
    pat = lt.pattern()
else:
    pat = lt.pattern(args.pattern) # empty pattern if None, else load .rle file

n=0
lmax=0
grid=[(x,y) for x in range(-args.side*args.space,args.side*args.space+args.space,args.space) for y in range(-args.side*args.space,args.side*args.space+args.space,args.space)]
#grid=[(0,0)]
ea=[]
while True:
    r = max(args.radius,np.sqrt(pat.population/len(grid))) # radius
    xy,e = batch(pat,args.period,lmax,args.batch,grid,r)
    ea.append(e)
    if e >= np.mean(ea):
        for (x,y) in xy:
            pat[x,y] ^= 1
        lmax += args.period
        l = lifespan(pat,0)
        log('BEST',n,l,lmax,len(xy),pat.population,r,e)
        pat.write_rle('{}/best_L{:09d}_seed{:09d}_n{:09d}.rle'.format(args.results,l,args.seed,n), header=None, footer=None, comments=str(args), file_format='rle', save_comments=True)
    n += args.batch
